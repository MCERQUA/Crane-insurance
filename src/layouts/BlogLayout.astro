---
import BaseLayout from './BaseLayout.astro';
import GlassCard from '../components/ui/GlassCard.tsx';

export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  author?: string;
  tags?: string[];
  image?: string;
  readTime?: string;
  schema?: {
    type?: string;
    faq?: Array<{
      question: string;
      answer: string;
    }>;
  };
}

const { 
  title, 
  description, 
  pubDate, 
  author = 'Heavy Crane Insurance Team', 
  tags = [],
  image = '/images/crane-insurance-default.jpg',
  readTime = '5 min read',
  schema
} = Astro.props;

const currentUrl = Astro.url.href;
const publishedDate = new Date(pubDate).toISOString();

// Generate structured data for the article
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "description": description,
  "image": `https://heavycraneinsurance.com${image}`,
  "datePublished": publishedDate,
  "dateModified": publishedDate,
  "author": {
    "@type": "Organization",
    "name": author,
    "url": "https://heavycraneinsurance.com"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Heavy Crane Insurance",
    "logo": {
      "@type": "ImageObject",
      "url": "https://heavycraneinsurance.com/logo.png"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": currentUrl
  },
  "articleSection": "Crane Insurance",
  "keywords": tags.join(', '),
  "wordCount": "5000",
  "timeRequired": readTime
};

// Generate FAQ schema if provided
const faqSchema = schema?.faq ? {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": schema.faq.map(item => ({
    "@type": "Question",
    "name": item.question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": item.answer
    }
  }))
} : null;
---

<BaseLayout title={title} description={description} ogImage={image}>
  <!-- Enhanced Schema.org Structured Data for Articles -->
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)}></script>
  
  {faqSchema && (
    <script type="application/ld+json" set:html={JSON.stringify(faqSchema)}></script>
  )}
  
  <!-- Additional Meta Tags for Better SEO -->
  <meta name="article:published_time" content={publishedDate} slot="head" />
  <meta name="article:author" content={author} slot="head" />
  <meta name="article:section" content="Insurance" slot="head" />
  {tags.map(tag => <meta name="article:tag" content={tag} slot="head" />)}
  
  <!-- Twitter Card Enhancements -->
  <meta name="twitter:label1" content="Reading time" slot="head" />
  <meta name="twitter:data1" content={readTime} slot="head" />
  <meta name="twitter:label2" content="Written by" slot="head" />
  <meta name="twitter:data2" content={author} slot="head" />
  <article class="min-h-screen pt-32 pb-16 bg-light-gray">
    <div class="container-padding max-w-4xl mx-auto">
      <!-- Blog Header -->
      <header class="mb-12 text-center">
        <h1 class="heading-xl text-espresso mb-6">
          {title}
        </h1>
        
        <div class="flex flex-wrap items-center justify-center gap-4 text-sm text-warm-gray">
          <span>By {author}</span>
          <span class="text-khaki">â€¢</span>
          <time datetime={pubDate.toISOString()}>
            {new Date(pubDate).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
        </div>
        
        {tags.length > 0 && (
          <div class="mt-4 flex flex-wrap gap-2 justify-center">
            {tags.map((tag) => (
              <span class="px-3 py-1 bg-sand/30 rounded-full text-xs font-medium text-taupe">
                {tag}
              </span>
            ))}
          </div>
        )}
      </header>
      
      <!-- Blog Content -->
      <GlassCard client:visible variant="white">
        <div class="prose prose-lg max-w-none blog-content
          prose-headings:text-espresso 
          prose-headings:font-bold
          prose-h1:text-4xl prose-h1:mb-8 prose-h1:mt-12 prose-h1:border-b-2 prose-h1:border-sand prose-h1:pb-4
          prose-h2:text-3xl prose-h2:mb-6 prose-h2:mt-10 prose-h2:font-semibold prose-h2:text-terra-cotta
          prose-h3:text-2xl prose-h3:mb-4 prose-h3:mt-8 prose-h3:font-medium
          prose-p:text-warm-gray prose-p:leading-relaxed prose-p:mb-6 prose-p:text-base
          prose-a:text-terra-cotta hover:prose-a:text-terra-cotta/80 prose-a:underline prose-a:underline-offset-2
          prose-strong:text-espresso prose-strong:font-semibold
          prose-code:text-terra-cotta prose-code:bg-cream prose-code:px-2 prose-code:py-0.5 prose-code:rounded prose-code:text-sm
          prose-pre:bg-cream prose-pre:border-2 prose-pre:border-sand prose-pre:shadow-md
          prose-blockquote:border-l-4 prose-blockquote:border-terra-cotta prose-blockquote:text-warm-gray prose-blockquote:italic prose-blockquote:pl-6 prose-blockquote:my-8 prose-blockquote:bg-cream/50 prose-blockquote:py-4 prose-blockquote:pr-4
          prose-ul:text-warm-gray prose-ul:my-6 prose-ul:space-y-2
          prose-ol:text-warm-gray prose-ol:my-6 prose-ol:space-y-2
          prose-li:leading-relaxed prose-li:pl-2
          prose-li:marker:text-terra-cotta
          prose-hr:border-sand prose-hr:my-12
          prose-table:border prose-table:border-sand
          prose-th:bg-cream prose-th:font-semibold prose-th:px-4 prose-th:py-2
          prose-td:px-4 prose-td:py-2 prose-td:border prose-td:border-sand
        ">
          <slot />
        </div>
      </GlassCard>
      
      <!-- Back to Blog -->
      <div class="mt-12 text-center">
        <a 
          href="/blog"
          class="inline-flex items-center gap-2 text-terra-cotta hover:text-terra-cotta/80 transition-colors duration-300 font-medium"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Blog
        </a>
      </div>
    </div>
  </article>
</BaseLayout>
